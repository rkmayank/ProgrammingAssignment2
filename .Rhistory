## We assume here that matrix is invertible.

makeCacheMatrix <- function (x = matrix()){
inv <- NULL   ## We equate inv variable with null objects

Set <- function(y){
x <<- y
inv<< - NULL
} ## Set the value of Matrix using another function
}

get <- function () {x}   ## Here we get the value of Matrix

SetInverse <- function( Inverse){inv<<- inverse} 
## Here we set the value of inverse function

getInverse <- function() {inv}   ## Here we get the value of inverse function

list ( set = set, get = get, SetInverse = SetInverse,getInverse = getInverse)
}    ## create a list of al variables

Cachesolve <- function(x,...){
inv<- x$getInverse()
if(!is.null(inv)){
message("getting cache data")
return(inv)
}
## This creates  the inverse of the matrix and assign it to variable inv.Then we see if inverse is there or not. If inverse is present we will get it from cache memory. 

mat <- x$get()
inv <- solve(mat, ...)
x$SetInverse(inv)
inv
}
## if the inverse of the matrix is not availabe then we first calculate it by using the function solve. When we get the value of the matrix we set it to inv variable.
